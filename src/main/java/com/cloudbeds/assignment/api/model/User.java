/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.cloudbeds.assignment.api.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 686051864178212727L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.cloudbeds.assignment.grpc.model\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"password\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addresses\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"addressLine1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addressLine2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"zipcode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<User> ENCODER =
            new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<User> DECODER =
            new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<User> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<User> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this User to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a User from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a User instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static User fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private String firstName;
    private String lastName;
    private String email;
    private String password;
    private java.util.List<Address> addresses;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public User() {
    }

    /**
     * All-args constructor.
     * @param firstName The new value for firstName
     * @param lastName The new value for lastName
     * @param email The new value for email
     * @param password The new value for password
     * @param addresses The new value for addresses
     */
    public User(String firstName, String lastName, String email, String password, java.util.List<Address> addresses) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.addresses = addresses;
    }

    public SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return firstName;
            case 1:
                return lastName;
            case 2:
                return email;
            case 3:
                return password;
            case 4:
                return addresses;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                firstName = value$ != null ? value$.toString() : null;
                break;
            case 1:
                lastName = value$ != null ? value$.toString() : null;
                break;
            case 2:
                email = value$ != null ? value$.toString() : null;
                break;
            case 3:
                password = value$ != null ? value$.toString() : null;
                break;
            case 4:
                addresses = (java.util.List<Address>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'firstName' field.
     * @return The value of the 'firstName' field.
     */
    public String getFirstName() {
        return firstName;
    }


    /**
     * Sets the value of the 'firstName' field.
     * @param value the value to set.
     */
    public void setFirstName(String value) {
        this.firstName = value;
    }

    /**
     * Gets the value of the 'lastName' field.
     * @return The value of the 'lastName' field.
     */
    public String getLastName() {
        return lastName;
    }


    /**
     * Sets the value of the 'lastName' field.
     * @param value the value to set.
     */
    public void setLastName(String value) {
        this.lastName = value;
    }

    /**
     * Gets the value of the 'email' field.
     * @return The value of the 'email' field.
     */
    public String getEmail() {
        return email;
    }


    /**
     * Sets the value of the 'email' field.
     * @param value the value to set.
     */
    public void setEmail(String value) {
        this.email = value;
    }

    /**
     * Gets the value of the 'password' field.
     * @return The value of the 'password' field.
     */
    public String getPassword() {
        return password;
    }


    /**
     * Sets the value of the 'password' field.
     * @param value the value to set.
     */
    public void setPassword(String value) {
        this.password = value;
    }

    /**
     * Gets the value of the 'addresses' field.
     * @return The value of the 'addresses' field.
     */
    public java.util.List<Address> getAddresses() {
        return addresses;
    }


    /**
     * Sets the value of the 'addresses' field.
     * @param value the value to set.
     */
    public void setAddresses(java.util.List<Address> value) {
        this.addresses = value;
    }

    /**
     * Creates a new User RecordBuilder.
     * @return A new User RecordBuilder
     */
    public static User.Builder newBuilder() {
        return new User.Builder();
    }

    /**
     * Creates a new User RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new User RecordBuilder
     */
    public static User.Builder newBuilder(User.Builder other) {
        if (other == null) {
            return new User.Builder();
        } else {
            return new User.Builder(other);
        }
    }

    /**
     * Creates a new User RecordBuilder by copying an existing User instance.
     * @param other The existing instance to copy.
     * @return A new User RecordBuilder
     */
    public static User.Builder newBuilder(User other) {
        if (other == null) {
            return new User.Builder();
        } else {
            return new User.Builder(other);
        }
    }

    /**
     * RecordBuilder for User instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
            implements org.apache.avro.data.RecordBuilder<User> {

        private String firstName;
        private String lastName;
        private String email;
        private String password;
        private java.util.List<Address> addresses;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(User.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.firstName)) {
                this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.lastName)) {
                this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.email)) {
                this.email = data().deepCopy(fields()[2].schema(), other.email);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.password)) {
                this.password = data().deepCopy(fields()[3].schema(), other.password);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.addresses)) {
                this.addresses = data().deepCopy(fields()[4].schema(), other.addresses);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
        }

        /**
         * Creates a Builder by copying an existing User instance
         * @param other The existing instance to copy.
         */
        private Builder(User other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.firstName)) {
                this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.lastName)) {
                this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.email)) {
                this.email = data().deepCopy(fields()[2].schema(), other.email);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.password)) {
                this.password = data().deepCopy(fields()[3].schema(), other.password);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.addresses)) {
                this.addresses = data().deepCopy(fields()[4].schema(), other.addresses);
                fieldSetFlags()[4] = true;
            }
        }

        /**
         * Gets the value of the 'firstName' field.
         * @return The value.
         */
        public String getFirstName() {
            return firstName;
        }


        /**
         * Sets the value of the 'firstName' field.
         * @param value The value of 'firstName'.
         * @return This builder.
         */
        public User.Builder setFirstName(String value) {
            validate(fields()[0], value);
            this.firstName = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'firstName' field has been set.
         * @return True if the 'firstName' field has been set, false otherwise.
         */
        public boolean hasFirstName() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'firstName' field.
         * @return This builder.
         */
        public User.Builder clearFirstName() {
            firstName = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'lastName' field.
         * @return The value.
         */
        public String getLastName() {
            return lastName;
        }


        /**
         * Sets the value of the 'lastName' field.
         * @param value The value of 'lastName'.
         * @return This builder.
         */
        public User.Builder setLastName(String value) {
            validate(fields()[1], value);
            this.lastName = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'lastName' field has been set.
         * @return True if the 'lastName' field has been set, false otherwise.
         */
        public boolean hasLastName() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'lastName' field.
         * @return This builder.
         */
        public User.Builder clearLastName() {
            lastName = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'email' field.
         * @return The value.
         */
        public String getEmail() {
            return email;
        }


        /**
         * Sets the value of the 'email' field.
         * @param value The value of 'email'.
         * @return This builder.
         */
        public User.Builder setEmail(String value) {
            validate(fields()[2], value);
            this.email = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'email' field has been set.
         * @return True if the 'email' field has been set, false otherwise.
         */
        public boolean hasEmail() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'email' field.
         * @return This builder.
         */
        public User.Builder clearEmail() {
            email = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'password' field.
         * @return The value.
         */
        public String getPassword() {
            return password;
        }


        /**
         * Sets the value of the 'password' field.
         * @param value The value of 'password'.
         * @return This builder.
         */
        public User.Builder setPassword(String value) {
            validate(fields()[3], value);
            this.password = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'password' field has been set.
         * @return True if the 'password' field has been set, false otherwise.
         */
        public boolean hasPassword() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'password' field.
         * @return This builder.
         */
        public User.Builder clearPassword() {
            password = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'addresses' field.
         * @return The value.
         */
        public java.util.List<Address> getAddresses() {
            return addresses;
        }


        /**
         * Sets the value of the 'addresses' field.
         * @param value The value of 'addresses'.
         * @return This builder.
         */
        public User.Builder setAddresses(java.util.List<Address> value) {
            validate(fields()[4], value);
            this.addresses = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'addresses' field has been set.
         * @return True if the 'addresses' field has been set, false otherwise.
         */
        public boolean hasAddresses() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'addresses' field.
         * @return This builder.
         */
        public User.Builder clearAddresses() {
            addresses = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public User build() {
            try {
                User record = new User();
                record.firstName = fieldSetFlags()[0] ? this.firstName : (String) defaultValue(fields()[0]);
                record.lastName = fieldSetFlags()[1] ? this.lastName : (String) defaultValue(fields()[1]);
                record.email = fieldSetFlags()[2] ? this.email : (String) defaultValue(fields()[2]);
                record.password = fieldSetFlags()[3] ? this.password : (String) defaultValue(fields()[3]);
                record.addresses = fieldSetFlags()[4] ? this.addresses : (java.util.List<Address>) defaultValue(fields()[4]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<User>
            WRITER$ = (org.apache.avro.io.DatumWriter<User>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<User>
            READER$ = (org.apache.avro.io.DatumReader<User>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.firstName);

        out.writeString(this.lastName);

        out.writeString(this.email);

        out.writeString(this.password);

        long size0 = this.addresses.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (Address e0 : this.addresses) {
            actualSize0++;
            out.startItem();
            e0.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.firstName = in.readString();

            this.lastName = in.readString();

            this.email = in.readString();

            this.password = in.readString();

            long size0 = in.readArrayStart();
            java.util.List<Address> a0 = this.addresses;
            if (a0 == null) {
                a0 = new SpecificData.Array<Address>((int) size0, SCHEMA$.getField("addresses").schema());
                this.addresses = a0;
            } else a0.clear();
            SpecificData.Array<Address> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Address>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    Address e0 = (ga0 != null ? ga0.peek() : null);
                    if (e0 == null) {
                        e0 = new Address();
                    }
                    e0.customDecode(in);
                    a0.add(e0);
                }
            }

        } else {
            for (int i = 0; i < 5; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.firstName = in.readString();
                        break;

                    case 1:
                        this.lastName = in.readString();
                        break;

                    case 2:
                        this.email = in.readString();
                        break;

                    case 3:
                        this.password = in.readString();
                        break;

                    case 4:
                        long size0 = in.readArrayStart();
                        java.util.List<Address> a0 = this.addresses;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<Address>((int) size0, SCHEMA$.getField("addresses").schema());
                            this.addresses = a0;
                        } else a0.clear();
                        SpecificData.Array<Address> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Address>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                Address e0 = (ga0 != null ? ga0.peek() : null);
                                if (e0 == null) {
                                    e0 = new Address();
                                }
                                e0.customDecode(in);
                                a0.add(e0);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










